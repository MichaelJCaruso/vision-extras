CoreWorkspace respondsTo: "JS". ifFalse: [
    ToolKit createSubclass: "JS" at: CoreWorkspace;
];

JS define: "co" toBePrimitive: 7;
JS :co printNL;

String define: "xo" toBePrimitive: 8;
String define: "xd" toBePrimitive: 8 withControlValue: 1;
String :xo printNL;
String :xd printNL;

################################################################################
#  NOTE: In the following, 'Object', 'Reflect', 'keys(:)' and 'get(:at:)' are
#  native javascript properties and functions.
################

JS defineMethod: [ | get: key from: jsObj |
    jsObj \.global Reflect get: jsObj \.id at: key
];

####  Returns a javascript array of 'jsObj's keys 
JS defineMethod: [ | getJSKeysFrom: jsObj |
    jsObj \.global :Object keys: jsObj \.id
];

####  Returns a Vision list of 'jsObj's keys...
JS defineMethod: [ | getKeysFrom: jsObj |
    !jsKeys <- ^self getJSKeysFrom: jsObj;
    jsKeys length sequence0 send: [
        ^my get: ^self from: ^my jsKeys
    ]
];

####  Returns a Vision list of 'jsObj's keys...
JS defineMethod: [ | getPropertyMapFrom: jsObj |
    !self <- ^self;
    ^self getKeysFrom: jsObj. extendBy: [
        !keyValue <- ^my self get: ^self from: ^my jsObj
    ]
];

JS defineMethod: [ | displayProperties: jsObj |
    ^self getPropertyMapFrom: jsObj. do: [
        ^self print: 20;
        keyValue printNL
    ];
];

################
^self defineMethod: [ | XO | :xo <- "2300" xo ];
^self defineMethod: [ | XD | :xo <- "NodeTest" xd ];
!xo;

################
Object defineMethod: [ | pump: b for: n |
    !i <- 0; [i < n] whileTrue: [:i increment print: -6; ^self send: b. printNL]
];

